:OP_0613_GET_CHAR_ANIM_CURRENT_TIME_1_6
//0@ = 0x0613
//1@ = _RegOpcode
//2@ = _getParamCollect
//3@ = _StoreParam
05F7: _ASM_OP_0613 = label @ASM_OP_0613 offset
_ASM_OP_0613 += 0x0C
14@ = _ASM_OP_0613
14@ += 0x4
2@ -= 14@
05DF: write_memory _ASM_OP_0613 size 4 value 2@ virtual_protect 1
_ASM_OP_0613 -= 0x0C

_ASM_OP_0613 += 0x12
05DF: write_memory _ASM_OP_0613 size 4 value _CTheScripts_ScriptParams virtual_protect 1
_ASM_OP_0613 -= 0x12

_ASM_OP_0613 += 0x19
05DF: write_memory _ASM_OP_0613 size 4 value _ZN6CPools11ms_pPedPoolE virtual_protect 1
_ASM_OP_0613 -= 0x19

_ASM_OP_0613 += 0x1E
14@ = _ASM_OP_0613
14@ += 0x4
13@ = _ZN6CPools6GetPedEi
13@ -= 14@
05DF: write_memory _ASM_OP_0613 size 4 value 13@ virtual_protect 1
_ASM_OP_0613 -= 0x1E

_ASM_OP_0613 += 0x24
13@ = _CTheScripts_ScriptParams 
13@ += 0x4
05DF: write_memory _ASM_OP_0613 size 4 value 13@ virtual_protect 1
_ASM_OP_0613 -= 0x24

_ASM_OP_0613 += 0x2E
14@ = _ASM_OP_0613
14@ += 0x4
13@ = _CAnimBlendAssociation_RpAnimBlendClumpGetAssociation
13@ -= 14@
05DF: write_memory _ASM_OP_0613 size 4 value 13@ virtual_protect 1
_ASM_OP_0613 -= 0x2E

_ASM_OP_0613 += 0x4A
05DF: write_memory _ASM_OP_0613 size 4 value _CTheScripts_ScriptParams virtual_protect 1
_ASM_OP_0613 -= 0x4A

_ASM_OP_0613 += 0x54
14@ = _ASM_OP_0613
14@ += 0x4
3@ -= 14@
05DF: write_memory _ASM_OP_0613 size 4 value 3@ virtual_protect 1
_ASM_OP_0613 -= 0x54

05DE: create_custom_thread 'SCR\OP+' OP_Thread_ID 1@ _ASM_OP_0613 CLEO_V_1_6   
05F6: ret 0

:OP_0613_GET_CHAR_ANIM_CURRENT_TIME_2_0
//0@ = 0x0613
//1@ = _RegisterOpcode
//2@ = _Collect
//3@ = _Store
0AC6: _ASM_OP_0613 = label @ASM_OP_0613 offset
0A8E: 14@ = _ASM_OP_0613 + 0x0C
0606: set_memory_offset memory_pointer 14@ memory_to_point 2@ virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x12
0A8C: write_memory 14@ size 4 value _CTheScripts_ScriptParams virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x19
0A8C: write_memory 14@ size 4 value _ZN6CPools11ms_pPedPoolE virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x1E
0606: set_memory_offset memory_pointer 14@ memory_to_point _ZN6CPools6GetPedEi virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x24
0A8E: 13@ = _CTheScripts_ScriptParams + 0x4
0A8C: write_memory 14@ size 4 value 13@ virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x2E
0606: set_memory_offset memory_pointer 14@ memory_to_point _CAnimBlendAssociation_RpAnimBlendClumpGetAssociation virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x4A
0A8C: write_memory 14@ size 4 value _CTheScripts_ScriptParams virtual_protect 1

0A8E: 14@ = _ASM_OP_0613 + 0x54
0606: set_memory_offset memory_pointer 14@ memory_to_point 3@ virtual_protect 1

0A92: create_custom_thread "SCR\OP+" OP_Thread_ID 1@ _ASM_OP_0613 CLEO_V_2_0
0AB2: ret 0

:ASM_OP_0613
hex
{0000}55               //push    ebp
{0001}8BEC             //mov     ebp, esp
{0003}83EC 04          //sub     esp, 4
{0006}8B4D 08          //mov     ecx, [ebp+8]
{0009}6A 02            //push    2
{000B}E8 00000000      //call    CScript::Collect
{0010}8B0D 00000000    //mov     ecx, ds: ScriptParams
{0016}51               //push    ecx
{0017}8B0D 00000000    //mov     ecx, ds: _ZN6CPools11ms_pPedPoolE
{001D}E8 00000000      //call    _ZN6CPools6GetPedEi
{0022}8B3D 00000000    //mov     edi, ds: ScriptParams+4
{0028}8B48 4C          //mov     ecx, [eax+4Ch]
{002B}57               //push    edi
{002C}51               //push    ecx
{002D}E8 00000000      //call    RpAnimBlendClumpGetAssociation
{0032}85C0             //test    eax, eax
{0034}C645 FC00        //mov     byte ptr [ebp-4], 0
{0038}74 0C            //jz      short loc_0046
{003A}D940 20          //fld     dword ptr [eax+20h]
{003D}8B50 14          //mov     edx, [eax+14h]
{0040}D872 20          //fdiv    dword ptr [edx+20h]
{0043}D95D FC          //fstp    dword ptr [ebp-4]

//loc_0046:
{0046}8B45 FC          //mov     eax, [ebp-4]
{0049}A3 00000000      //mov     ds: ScriptParams, eax
{004E}8B4D 08          //mov     ecx, [ebp+8]
{0051}6A 01            //push    1
{0053}E8 00000000      //call    CScript::Store
{0058}32C0             //xor     al, al
{005A}83C4 04          //add     esp, 4
{005D}8BE5             //mov     esp, ebp
{005F}5D               //pop     ebp
{0060}C2 0400          //retn    4
end