:OP_0C04_GET_HEADING_FROM_VECTOR_2D_1_6
//0@ = 0x0C04
//1@ = _RegOpcode
//2@ = _getParamCollect
//3@ = _StoreParam
05F7: _ASM_OP_0C04 = label @ASM_OP_0C04 offset
_ASM_OP_0C04 += 0x0C
14@ = _ASM_OP_0C04
14@ += 0x4
2@ -= 14@
05DF: write_memory _ASM_OP_0C04 size 4 value 2@ virtual_protect 1
_ASM_OP_0C04 -= 0x0C

_ASM_OP_0C04 += 0x11
13@ = _CTheScripts_ScriptParams 
13@ += 0x4
05DF: write_memory _ASM_OP_0C04 size 4 value 13@ virtual_protect 1
_ASM_OP_0C04 -= 0x11

_ASM_OP_0C04 += 0x17
05DF: write_memory _ASM_OP_0C04 size 4 value _CTheScripts_ScriptParams virtual_protect 1
_ASM_OP_0C04 -= 0x17

_ASM_OP_0C04 += 0x1E
14@ = _ASM_OP_0C04
14@ += 0x4
13@ = _CGeneral_GetATanOfXY
13@ -= 14@
05DF: write_memory _ASM_OP_0C04 size 4 value 13@ virtual_protect 1
_ASM_OP_0C04 -= 0x1E

_ASM_OP_0C04 += 0x24
05DF: write_memory _ASM_OP_0C04 size 4 value _flt_68A818 virtual_protect 1
_ASM_OP_0C04 -= 0x24

_ASM_OP_0C04 += 0x2A
05DF: write_memory _ASM_OP_0C04 size 4 value _flt_688628 virtual_protect 1
_ASM_OP_0C04 -= 0x2A

_ASM_OP_0C04 += 0x30
05DF: write_memory _ASM_OP_0C04 size 4 value _fZero virtual_protect 1
_ASM_OP_0C04 -= 0x30

_ASM_OP_0C04 += 0x46
05DF: write_memory _ASM_OP_0C04 size 4 value _flt_6894CC virtual_protect 1
_ASM_OP_0C04 -= 0x46

_ASM_OP_0C04 += 0x4C
05DF: write_memory _ASM_OP_0C04 size 4 value _fZero virtual_protect 1
_ASM_OP_0C04 -= 0x4C

_ASM_OP_0C04 += 0x68
05DF: write_memory _ASM_OP_0C04 size 4 value _CTheScripts_ScriptParams virtual_protect 1
_ASM_OP_0C04 -= 0x68

_ASM_OP_0C04 += 0x6D
14@ = _ASM_OP_0C04
14@ += 0x4
3@ -= 14@
05DF: write_memory _ASM_OP_0C04 size 4 value 3@ virtual_protect 1
_ASM_OP_0C04 -= 0x6D

05DE: create_custom_thread 'SCR\OP+' OP_Thread_ID 1@ _ASM_OP_0C04 CLEO_V_1_6   
05F6: ret 0

:OP_0C04_GET_HEADING_FROM_VECTOR_2D_2_0
//0@ = 0x0C04
//1@ = _RegisterOpcode
//2@ = _Collect
//3@ = _Store
0AC6: _ASM_OP_0C04 = label @ASM_OP_0C04 offset

0A8E: 14@ = _ASM_OP_0C04 + 0x0C
0606: set_memory_offset memory_pointer 14@ memory_to_point 2@ virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x11
0A8E: 13@ = _CTheScripts_ScriptParams + 0x4
0A8C: write_memory 14@ size 4 value 13@ virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x17
0A8C: write_memory 14@ size 4 value _CTheScripts_ScriptParams virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x1E
0606: set_memory_offset memory_pointer 14@ memory_to_point _CGeneral_GetATanOfXY virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x24
0A8C: write_memory 14@ size 4 value _flt_68A818 virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x2A
0A8C: write_memory 14@ size 4 value _flt_688628 virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x30
0A8C: write_memory 14@ size 4 value _fZero virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x46
0A8C: write_memory 14@ size 4 value _flt_6894CC virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x4C
0A8C: write_memory 14@ size 4 value _fZero virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x68
0A8C: write_memory 14@ size 4 value _CTheScripts_ScriptParams virtual_protect 1

0A8E: 14@ = _ASM_OP_0C04 + 0x6D
0606: set_memory_offset memory_pointer 14@ memory_to_point 3@ virtual_protect 1

0A92: create_custom_thread "SCR\OP+" OP_Thread_ID 1@ _ASM_OP_0C04 CLEO_V_2_0
0AB2: ret 0

:ASM_OP_0C04
hex
{0000}55               //push    ebp
{0001}8BEC             //mov     ebp, esp
{0003}83EC 08          //sub     esp, 8
{0006}8B4D 08          //mov     ecx, [ebp+8]
{0009}6A 02            //push    2
{000B}E8 00000000      //call    CScript::Collect
{0010}A1 00000000      //mov     eax, ds: ScriptParams+4
{0015}8B0D 00000000    //mov     ecx, ds: ScriptParams
{001B}50               //push    eax
{001C}51               //push    ecx
{001D}E8 00000000      //call    CGeneral::GetATanOfXY
{0022}D80D 00000000    //fmul    flt_68A818
{0028}D825 00000000    //fsub    flt_688628
{002E}D815 00000000    //fcom    fZero
{0034}D955 F8          //fst     dword ptr [ebp-8]
{0037}DFE0             //fnstsw  ax
{0039}F6C4 05          //test    ah, 5
{003C}7A 1E            //jp      short loc_005C
{003E}EB 00            //jmp     short loc_0044
{0040}90               //nop
{0041}90               //nop
{0042}90               //nop
{0043}90               //nop

//loc_0044:
{0044}D805 00000000    //fadd    flt_6894CC
{004A}D815 00000000    //fcom    fZero
{0050}DFE0             //fnstsw  ax
{0052}F6C4 05          //test    ah, 5
{0055}7B ED            //jnp     short loc_0044
{0057}D95D F8          //fstp    dword ptr [ebp-8]
{005A}EB 02            //jmp     short loc_005E

//loc_005C:
{005C}DDD8             //fstp    st

//loc_005E:
{005E}8B55 F8          //mov     edx, [ebp-8]
{0061}8B4D 08          //mov     ecx, [ebp+8]
{0064}6A 01            //push    1
{0066}8915 00000000    //mov     ds: ScriptParams, edx
{006C}E8 00000000      //call    CScript::Store 
{0071}32C0             //xor     al, al
{0073}83C4 08          //add     esp, 8
{0076}8BE5             //mov     esp, ebp
{0078}5D               //pop     ebp
{0079}C2 0400          //retn    4
end 